# handlers/payment_handlers.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from backward_bot.config.settings import PRICING_PLANS
from backward_bot.services.payment_service import PaymentService
from backward_bot.services.subscription_service import SubscriptionService
from backward_bot.keyboards.payment_keyboard import PaymentKeyboards
from backward_bot.database.models import UserCredits

logger = logging.getLogger(__name__)


class PaymentHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

    def __init__(self, payment_service: PaymentService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π

        Args:
            payment_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
        """
        self.payment_service = payment_service

    async def show_pricing(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
        keyboard = PaymentKeyboards.get_tariff_selection_keyboard()

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n\n"
            "üéÅ *–ü—Ä–æ–±–Ω—ã–π*\n"
            "‚Ä¢ 20 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ë–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
            "üí´ *–ë–∞–∑–æ–≤—ã–π*\n"
            "‚Ä¢ 100 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ë–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "‚≠êÔ∏è *–°—Ç–∞–Ω–¥–∞—Ä—Ç*\n"
            "‚Ä¢ 300 —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ë–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        user_id = update.effective_user.id
        credits = await self.payment_service.get_user_credits(user_id)

        message = (
            f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {credits if credits is not None else 0}\n\n"
        )

        keyboard = PaymentKeyboards.get_credits_info_keyboard()

        await update.message.reply_text(
            message,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def handle_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            query = update.callback_query
            logger.info(f"FULL CALLBACK DATA: {update}")
            logger.info(f"Received callback query with data: {query.data}")
            logger.info(f"User data: {context.user_data}")
            logger.info(f"Bot data: {context.bot_data.keys()}")

            await query.answer()

            data = query.data.split(':')
            action = data[0]

            logger.info(f"Processing action: {action}")

            if action == "select_plan":
                plan_id = data[1]
                plan = PRICING_PLANS.get(plan_id)

                logger.info(f"Selected plan: {plan_id}, Plan details: {plan}")

                if not plan:
                    logger.error(f"Plan not found: {plan_id}")
                    await query.message.edit_text("–û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                if plan_id == 'trial':
                    logger.info("Processing trial activation")
                    await self._handle_trial_activation(query, context)
                else:
                    logger.info("Processing demo payment")
                    keyboard = [
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É (–¥–µ–º–æ)", callback_data="demo_payment_success")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
                    ]

                    message_text = (
                        f"üîÑ *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã*\n\n"
                        f"–¢–∞—Ä–∏—Ñ: {plan['name']}\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–π: {plan['messages']}\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']}‚ÇΩ\n\n"
                        f"–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã.\n"
                        f"–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ÆKassa.\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É."
                    )

                    context.user_data['selected_plan'] = plan_id

                    await query.message.edit_text(
                        message_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )

            elif action == "demo_payment_success":
                logger.info("STARTING DEMO PAYMENT SUCCESS HANDLER")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω –≤—ã–±—Ä–∞–Ω
                if 'selected_plan' not in context.user_data:
                    logger.error("No selected plan in user data")
                    await query.message.edit_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ü–ª–∞–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=PaymentKeyboards.get_tariff_selection_keyboard()
                    )
                    return

                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂–∞
                await self._handle_demo_payment_success(query, context)

            elif action == "cancel_payment":
                await self._handle_payment_cancellation(query)

        except Exception as e:
            logger.error(f"CRITICAL ERROR in payment callback: {e}", exc_info=True)
            await query.message.edit_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            )

    async def _handle_demo_payment(self, query: Update.callback_query, context, plan: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂–∞"""
        # –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –ø–ª–∞–Ω–∞ –≤ PRICING_PLANS
        plan_id = next(key for key, value in PRICING_PLANS.items() if value == plan)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ user_data
        context.user_data['selected_plan'] = plan_id

        logger.info(f"Handling demo payment for plan: {plan['name']}")

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É (–¥–µ–º–æ)", callback_data="demo_payment_success")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
        ]

        message_text = (
            f"üîÑ *–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ–ø–ª–∞—Ç—ã*\n\n"
            f"–¢–∞—Ä–∏—Ñ: {plan['name']}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {plan['messages']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']}‚ÇΩ\n\n"
            f"–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã.\n"
            f"–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ÆKassa.\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', —á—Ç–æ–±—ã —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É."
        )

        await query.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

    async def _handle_demo_payment_success(self, query: Update.callback_query, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –¥–µ–º–æ-–æ–ø–ª–∞—Ç—ã"""
        try:
            logger.info("ENTERED _handle_demo_payment_success")

            user_id = query.from_user.id
            logger.info(f"User ID: {user_id}")

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            plan_id = context.user_data.get('selected_plan', 'standard')
            logger.info(f"Plan ID from user_data: {plan_id}")

            plan = PRICING_PLANS.get(plan_id)
            logger.info(f"Selected Plan details: {plan}")

            if not plan:
                logger.error(f"Invalid plan selected: {plan_id}")
                await query.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=PaymentKeyboards.get_tariff_selection_keyboard()
                )
                return

            # –ù–û–í–û–ï: –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Å—Å–∏–∏
            if 'db_session' not in context.bot_data:
                logger.error("NO DATABASE SESSION IN BOT DATA")
                await query.message.edit_text("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            session = context.bot_data['db_session']

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–µ–º–æ-–ø–ª–∞–Ω
            user_credits = session.query(UserCredits).filter_by(user_id=user_id).first()

            if not user_credits:
                user_credits = UserCredits(user_id=user_id, credits_remaining=0)
                session.add(user_credits)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            user_credits.credits_remaining += plan['messages']
            session.commit()

            logger.info(f"Successfully added {plan['messages']} credits for user {user_id}")

            await query.message.edit_text(
                "‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"–¢–∞—Ä–∏—Ñ: *{plan['name']}*\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: *{plan['messages']}*\n"
                f"–ë–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤: *{user_credits.credits_remaining}*\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n\n"
                "_–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º_",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="start_using")],
                    [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="check_balance")]
                ])
            )

        except Exception as e:
            logger.error(f"CRITICAL DEMO PAYMENT ERROR: {e}", exc_info=True)
            await query.message.edit_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=PaymentKeyboards.get_tariff_selection_keyboard()
            )

    async def _handle_trial_activation(self, query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        user_id = query.from_user.id

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            session = context.bot_data['db_session']
            user_credits = session.query(UserCredits).filter_by(user_id=user_id).first()

            if user_credits and user_credits.has_used_trial:
                keyboard = [
                    [InlineKeyboardButton("üí´ –ë–∞–∑–æ–≤—ã–π (290‚ÇΩ)", callback_data="select_plan:basic")],
                    [InlineKeyboardButton("‚≠êÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç (690‚ÇΩ)", callback_data="select_plan:standard")]
                ]

                await query.message.edit_text(
                    "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            trial_plan = PRICING_PLANS['trial']

            if not user_credits:
                user_credits = UserCredits(user_id=user_id, credits_remaining=0, has_used_trial=False)
                session.add(user_credits)

            user_credits.credits_remaining += trial_plan['messages']
            user_credits.has_used_trial = True
            session.commit()

            await query.message.edit_text(
                "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {trial_plan['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
                reply_markup=PaymentKeyboards.get_main_menu_keyboard()
            )

        except Exception as e:
            logger.error(f"Error activating trial: {e}")
            await query.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _handle_payment_cancellation(self, query: Update.callback_query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
        await query.message.edit_text(
            "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=PaymentKeyboards.get_tariff_selection_keyboard()
        )
