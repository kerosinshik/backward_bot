# handlers/admin_handlers.py

from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.settings import ADMIN_USERS
from services.analytics_service import AnalyticsService
from services.telegram_report_service import TelegramReportService
import logging
from database.models import ExerciseFeedback

logger = logging.getLogger(__name__)

async def verify_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_USERS

class AdminCommands:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

    def __init__(self, analytics_service: AnalyticsService, report_service: TelegramReportService):
        self.analytics = analytics_service
        self.report_service = report_service

    async def verify_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in ADMIN_USERS

    async def handle_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if not update.effective_user:
            return

        user_id = update.effective_user.id

        if not await self.verify_admin(user_id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        command = update.message.text.split()[0].lower()

        try:
            if command == '/stats':
                await self.send_general_stats(update)
            elif command == '/daily':
                await self.send_daily_stats(update)
            elif command == '/weekly':
                await self.send_weekly_stats(update)
            elif command == '/users':
                await self.send_users_stats(update)
            elif command == '/errors':
                await self.send_error_stats(update)
            elif command == '/feedbacks':  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
                await self.handle_feedbacks_command(update, context)
            elif command == '/export_feedbacks':
                await self.handle_feedbacks_export(update, context)
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

    async def send_general_stats(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.analytics.get_daily_stats()  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        total_users = stats['users']['total_unique']
        total_actions = stats['engagement']['total_actions']

        message = [
            "üìä *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n",
            f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {total_users}",
            f"üìù *–î–µ–π—Å—Ç–≤–∏—è*: {total_actions}",
            f"üéØ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞—á–∞—Ç–æ*: {stats['exercises']['total_started']}",
            f"‚úÖ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ*: {stats['exercises']['total_completed']}",
            f"\nüîÑ *–ö–æ–Ω–≤–µ—Ä—Å–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π*: {stats['exercises'].get('completion_rate', 0):.1f}%"
        ]

        await update.message.reply_text("\n".join(message), parse_mode='Markdown')

    async def send_daily_stats(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = self.analytics.get_daily_stats()
        await self.report_service.send_daily_report(stats)
        await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    async def send_weekly_stats(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=7)

        message = [
            f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ*\n",
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}\n"
        ]

        weekly_totals = {
            'users': 0,
            'actions': 0,
            'exercises_started': 0,
            'exercises_completed': 0
        }

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        current_date = start_date
        while current_date <= end_date:
            daily_stats = self.analytics.get_daily_stats(current_date)
            weekly_totals['users'] += daily_stats['users']['total_unique']
            weekly_totals['actions'] += daily_stats['engagement']['total_actions']
            weekly_totals['exercises_started'] += daily_stats['exercises']['total_started']
            weekly_totals['exercises_completed'] += daily_stats['exercises']['total_completed']
            current_date += timedelta(days=1)

        message.extend([
            f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {weekly_totals['users']}",
            f"üìù *–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π*: {weekly_totals['actions']}",
            f"üéØ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞—á–∞—Ç–æ*: {weekly_totals['exercises_started']}",
            f"‚úÖ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ*: {weekly_totals['exercises_completed']}"
        ])

        await update.message.reply_text("\n".join(message), parse_mode='Markdown')

    async def send_users_stats(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        stats = self.analytics.get_daily_stats()

        message = [
            "üë• *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n",
            f"*–°–µ–≥–æ–¥–Ω—è*:",
            f"‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {stats['users']['total_unique']}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats['users']['new_users']}",
            f"‚Ä¢ –í–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è: {stats['users']['returning_users']}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['users']['active_users']}\n",
            "*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*:",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['engagement']['total_actions'] / max(stats['users']['total_unique'], 1):.1f}",
            "\n*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã*:"
        ]

        for section, count in stats['content'].get('knowledge_base_views', {}).items():
            message.append(f"‚Ä¢ {section}: {count}")

        await update.message.reply_text("\n".join(message), parse_mode='Markdown')

    async def send_error_stats(self, update: Update):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        stats = self.analytics.get_daily_stats()

        message = [
            "‚ö†Ô∏è *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö*\n",
            f"‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['errors']['total_errors']}",
            f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {stats['errors'].get('error_rate', 0):.2f}%\n",
            "*–¢–∏–ø—ã –æ—à–∏–±–æ–∫*:"
        ]

        for error_type, count in stats['errors'].get('error_types', {}).items():
            message.append(f"‚Ä¢ {error_type}: {count}")

        await update.message.reply_text("\n".join(message), parse_mode='Markdown')

    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if not await self.verify_admin(query.from_user.id):
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        callback_data = query.data

        try:
            if callback_data == "admin_stats_daily":
                await self.send_daily_stats(update)
            elif callback_data == "admin_stats_weekly":
                await self.send_weekly_stats(update)
            elif callback_data == "admin_stats_users":
                await self.send_users_stats(update)
            elif callback_data == "admin_stats_errors":
                await self.send_error_stats(update)
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    async def handle_feedbacks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedbacks"""
        try:
            session = context.bot_data['db_session']
            feedbacks = session.query(ExerciseFeedback).order_by(ExerciseFeedback.feedback_date.desc()).all()

            if not feedbacks:
                await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö.")
                return

            response = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö:\n\n"
            for fb in feedbacks:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    user = await context.bot.get_chat(fb.user_id)
                    user_info = f"@{user.username}" if user.username else f"id: {fb.user_id}"
                    user_name = user.full_name
                except Exception:
                    user_info = f"id: {fb.user_id}"
                    user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                response += f"–î–∞—Ç–∞: {fb.feedback_date.strftime('%Y-%m-%d %H:%M')}\n"
                response += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} ({user_info})\n"
                response += f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {fb.exercise_id}\n"
                response += f"–û—Ç–∑—ã–≤: {fb.feedback_text}\n"
                response += "-" * 20 + "\n"

            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"Error getting feedbacks: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.")

    async def handle_feedbacks_export(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export_feedbacks"""
        try:
            session = context.bot_data['db_session']
            feedbacks = session.query(ExerciseFeedback).order_by(ExerciseFeedback.feedback_date.desc()).all()

            if not feedbacks:
                await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
                return

            # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
            import io
            import csv
            from datetime import datetime

            output = io.StringIO()
            writer = csv.writer(output, delimiter=';', quotechar='"')

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(['–î–∞—Ç–∞', 'User ID', 'Username', '–ò–º—è', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', '–û—Ç–∑—ã–≤', '–ö–æ–Ω—Ç–µ–∫—Å—Ç'])

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for fb in feedbacks:
                try:
                    user = await context.bot.get_chat(fb.user_id)
                    username = f"@{user.username}" if user.username else "–ù–µ—Ç"
                    user_name = user.full_name
                except Exception:
                    username = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                writer.writerow([
                    fb.feedback_date.strftime('%Y-%m-%d %H:%M'),
                    fb.user_id,
                    username,
                    user_name,
                    fb.exercise_id,
                    fb.feedback_text,
                    fb.context
                ])

            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            output.seek(0)
            filename = f"feedbacks_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await update.message.reply_document(
                document=io.BytesIO(output.getvalue().encode('utf-8-sig')),
                # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
                filename=filename,
                caption="–í—ã–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö"
            )

        except Exception as e:
            logger.error(f"Error exporting feedbacks: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.")
