# handlers/admin_handlers.py
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext

from config.settings import (
    ADMIN_USERS,
    ANONYMIZATION_SETTINGS,
    ANALYTICS_SETTINGS
)
from services.analytics_service import AnalyticsService
from services.user_history_service import UserHistoryService
from services.telegram_report_service import TelegramReportService

logger = logging.getLogger(__name__)


class AdminCommands:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(
            self,
            analytics_service: AnalyticsService,
            report_service: TelegramReportService,
            user_history_service: UserHistoryService
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

        Args:
            analytics_service: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            report_service: –°–µ—Ä–≤–∏—Å telegram-—Ä–µ–ø–æ—Ä—Ç–æ–≤
            user_history_service: –°–µ—Ä–≤–∏—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        self.analytics = analytics_service
        self.report_service = report_service
        self.user_history = user_history_service

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        self.pseudonymize = ANONYMIZATION_SETTINGS.get(
            'enable_pseudonymization',
            True
        )

    async def verify_admin(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            bool: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        """
        return user_id in ADMIN_USERS

    async def handle_admin_command(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        if not update.effective_user:
            return

        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.verify_admin(user_id):
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        command = update.message.text.split()[0].lower()

        try:
            if command == '/stats':
                await self.send_general_stats(update)
            elif command == '/daily':
                await self.send_daily_stats(update)
            elif command == '/weekly':
                await self.send_weekly_stats(update)
            elif command == '/users':
                await self.send_users_stats(update)
            elif command == '/errors':
                await self.send_error_stats(update)
            elif command == '/privacy_stats':
                await self.send_privacy_stats(update)

        except Exception as e:
            logger.error(f"Error in admin command {command}: {e}")
            await update.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
            )

    async def send_general_stats(self, update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        logger.info("Entering send_general_stats method")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        stats = self.analytics.get_daily_stats()

        logger.info(f"Obtained stats: {stats}")

        total_users = stats['users']['total_unique']
        total_actions = stats['engagement']['total_actions']

        message = [
            "üìä *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n",
            f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*: {total_users}",
            f"üìù *–î–µ–π—Å—Ç–≤–∏—è*: {total_actions}",
            "\n*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*:",
            f"‚Ä¢ –ü—Å–µ–≤–¥–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if self.pseudonymize else '–í—ã–∫–ª—é—á–µ–Ω–∞'}"
        ]

        await update.message.reply_text(
            "\n".join(message),
            parse_mode='Markdown'
        )

    async def send_daily_stats(self, update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.analytics.get_daily_stats()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ä–µ–ø–æ—Ä—Ç–æ–≤
        await self.report_service.send_daily_report(stats=stats)

        await update.message.reply_text(
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )

    async def send_weekly_stats(self, update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=7)

        # –ü–æ–ª—É—á–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        weekly_stats = self.report_service._aggregate_weekly_stats(start_date, end_date)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = [
            f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ*\n",
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}\n",
            f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {weekly_stats['total_users']}",
            f"üìù *–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π*: {weekly_stats['total_actions']}",
            f"üìä *–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {weekly_stats['new_users']}",
            f"üîÑ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*: {weekly_stats['active_users']}"
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ä–µ–ø–æ—Ä—Ç–æ–≤
        await self.report_service.send_weekly_report(stats=weekly_stats)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º summary –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await update.message.reply_text(
            "\n".join(message),
            parse_mode='Markdown'
        )

    async def send_users_stats(self, update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.analytics.get_daily_stats()

        message = [
            "üë• *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô*\n",
            f"*–°–µ–≥–æ–¥–Ω—è*:",
            f"‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {stats['users']['total_unique']}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats['users']['new_users']}",
            f"‚Ä¢ –í–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è: {stats['users']['returning_users']}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['users']['active_users']}\n",
            "*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*:",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['engagement']['total_actions'] / max(stats['users']['total_unique'], 1):.1f}"
        ]

        await update.message.reply_text(
            "\n".join(message),
            parse_mode='Markdown'
        )

    async def send_error_stats(self, update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.analytics.get_daily_stats()

        message = [
            "‚ö†Ô∏è *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö*\n",
            f"‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['errors']['total_errors']}",
            f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: {stats['errors'].get('error_rate', 0):.2f}%"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        if stats['errors'].get('error_types'):
            message.append("\n*–¢–∏–ø—ã –æ—à–∏–±–æ–∫*:")
            for error_type, count in stats['errors']['error_types'].items():
                message.append(f"‚Ä¢ {error_type}: {count}")

        await update.message.reply_text(
            "\n".join(message),
            parse_mode='Markdown'
        )

    async def send_privacy_stats(self, update: Update):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            privacy_stats = await self.user_history.get_data_retention_statistics()

            message = [
                "üîí *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò*\n",
                f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*:",
                f"‚Ä¢ –ü—Å–µ–≤–¥–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if self.pseudonymize else '–í—ã–∫–ª—é—á–µ–Ω–∞'}",
                f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {ANALYTICS_SETTINGS.get('max_context_messages', 30)} —Å–æ–æ–±—â–µ–Ω–∏–π\n",
                "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏*:",
                f"‚Ä¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—Å—Ç–∫–∏: {privacy_stats.get('total_operations', 0)}",
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {privacy_stats.get('total_records_affected', 0)}"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
            if privacy_stats.get('operations_by_type'):
                message.append("\n*–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π*:")
                for op_type, data in privacy_stats['operations_by_type'].items():
                    message.append(
                        f"‚Ä¢ {op_type}: "
                        f"{data.get('count', 0)} –æ–ø–µ—Ä–∞—Ü–∏–π, "
                        f"{data.get('records_affected', 0)} –∑–∞–ø–∏—Å–µ–π"
                    )

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            last_month = privacy_stats.get('last_30_days', {})
            message.extend([
                "\n*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π*:",
                f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {last_month.get('operations', 0)}",
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {last_month.get('records_affected', 0)}"
            ])

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è
            if privacy_stats.get('last_operation_date'):
                message.append(
                    f"\n*–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è*: {privacy_stats['last_operation_date']}"
                )

            await update.message.reply_text(
                "\n".join(message),
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"Error getting privacy stats: {e}")
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
            )

    async def handle_admin_callback(
            self,
            update: Update,
            context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

        Args:
            update: –í—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        query = update.callback_query
        await query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await self.verify_admin(query.from_user.id):
            await query.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
            return

        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
            callback_data = query.data

            if callback_data == "admin_stats_daily":
                await self.send_daily_stats(update)
            elif callback_data == "admin_stats_weekly":
                await self.send_weekly_stats(update)
            elif callback_data == "admin_stats_users":
                await self.send_users_stats(update)
            elif callback_data == "admin_stats_errors":
                await self.send_error_stats(update)
            elif callback_data == "admin_stats_privacy":
                await self.send_privacy_stats(update)

        except Exception as e:
            logger.error(f"Error in admin callback: {e}")
            await query.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
