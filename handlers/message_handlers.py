# handlers/message_handlers.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from services.claude_service import ClaudeService
from config.settings import WELCOME_MESSAGE, HELP_MESSAGE
from config.knowledge_content import KNOWLEDGE_BASE, PRACTICE_EXERCISES
from services.analytics_service import AnalyticsService
from database.models import ExerciseFeedback
from datetime import datetime

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
claude_service = ClaudeService()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class NavigationMarkup:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""

    @staticmethod
    def get_main_menu():
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        keyboard = [
            [KeyboardButton("üÜï –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
            [KeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    @staticmethod
    def get_knowledge_base_buttons(current_section=None):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        sections = {
            'principles': "–û –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö",
            'examples': "–ü—Ä–∏–º–µ—Ä—ã",
            'faq': "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            'practice': "–ü—Ä–∞–∫—Ç–∏–∫–∞"
        }

        # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞
        if current_section and current_section in sections:
            sections.pop(current_section)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        items = list(sections.items())

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–∞—Ä–∞–º–∏
        for i in range(0, len(items), 2):
            row = []
            row.append(InlineKeyboardButton(items[i][1], callback_data=items[i][0]))
            if i + 1 < len(items):
                row.append(InlineKeyboardButton(items[i + 1][1], callback_data=items[i + 1][0]))
            buttons.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def get_exercise_buttons():
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –æ–ø—ã—Ç–∞", callback_data="exercise_1")],
            [InlineKeyboardButton("2Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π", callback_data="exercise_2")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_exercise_keyboard():
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="complete_exercise")],
            [InlineKeyboardButton("üìö –û –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö", callback_data="principles"),
             InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—Ä—ã", callback_data="examples")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)


async def log_user_action(context: ContextTypes.DEFAULT_TYPE, user_id: int, action_type: str, content: str = None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    analytics = AnalyticsService(context.bot_data['db_session'])
    await analytics.log_action(user_id, action_type, content)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/start')

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    analytics = AnalyticsService(context.bot_data['db_session'])
    await analytics.log_first_time_user(user_id)

    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=NavigationMarkup.get_main_menu()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/help')

    await update.message.reply_text(
        HELP_MESSAGE,
        reply_markup=NavigationMarkup.get_main_menu()
    )


async def new_consultation_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/new')

    claude_service.clear_conversation(user_id)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
        reply_markup=NavigationMarkup.get_main_menu()
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.effective_user:
        logger.error("No user found in update")
        return

    user_id = update.effective_user.id
    message_text = update.message.text if update.message else None

    if not message_text:
        logger.error(f"No message text found for user {user_id}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∏–¥–±–µ–∫–∞
    if context.user_data.get('awaiting_feedback'):
        exercise_data = context.user_data['awaiting_feedback']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ –ë–î
        try:
            feedback = ExerciseFeedback(
                user_id=user_id,
                exercise_id=exercise_data['exercise_id'],
                exercise_date=datetime.utcnow(),
                feedback_text=message_text,
                context=exercise_data['context']
            )

            session = context.bot_data['db_session']
            session.add(feedback)
            session.commit()

            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –µ—â–µ –ª—É—á—à–µ.",
                reply_markup=NavigationMarkup.get_main_menu()
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            return

        except Exception as e:
            logger.error(f"Error saving feedback: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.",
                reply_markup=NavigationMarkup.get_main_menu()
            )
            context.user_data.clear()
            return

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await log_user_action(context, user_id, 'message_received', message_text[:100])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    if message_text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π":
        await log_user_action(context, user_id, 'menu_action', 'knowledge_base')
        await send_knowledge_base_menu(update, context)
        return

    if message_text == "üÜï –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await log_user_action(context, user_id, 'menu_action', 'new_consultation')
        await new_consultation_command(update, context)
        return

    if message_text == "‚ùì –ü–æ–º–æ—â—å":
        await log_user_action(context, user_id, 'menu_action', 'help')
        await help_command(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    current_exercise = context.user_data.get('current_exercise')
    exercise_stage = context.user_data.get('exercise_stage')

    if current_exercise and exercise_stage:
        await log_user_action(context, user_id, 'exercise_input', f"{current_exercise}:{exercise_stage}")
        await handle_exercise_input(update, context, current_exercise, exercise_stage, message_text)
        return

    # –û–±—ã—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        await log_user_action(context, user_id, 'consultation_start', None)

        response = claude_service.get_consultation(user_id, message_text)

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        await log_user_action(context, user_id, 'consultation_complete', str(len(response)))

        await update.message.reply_text(
            response,
            reply_markup=NavigationMarkup.get_main_menu()
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await log_user_action(context, user_id, 'error', str(e)[:100])
        logger.error(f"Error in message handler: {e}")
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=NavigationMarkup.get_main_menu()
            )


async def handle_knowledge_section(update: Update, context: ContextTypes.DEFAULT_TYPE, section: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'knowledge_view', section)

    content = KNOWLEDGE_BASE.get(section)
    if not content:
        await log_user_action(context, user_id, 'error', f'section_not_found:{section}')
        return None
    return content


async def handle_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE, exercise_number: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'exercise_start', f'exercise_{exercise_number}')

    exercise = PRACTICE_EXERCISES.get(f'exercise_{exercise_number}')
    if not exercise:
        await log_user_action(context, user_id, 'error', f'exercise_not_found:{exercise_number}')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        message = update.message or update.callback_query.message
        await message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    message = f"*{exercise['title']}*\n\n"
    message += exercise.get('description', "\n".join(exercise['steps']))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    context.user_data['current_exercise'] = f'exercise_{exercise_number}'
    context.user_data['exercise_stage'] = 'waiting_for_description'

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    response_message = update.message or update.callback_query.message
    await response_message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=NavigationMarkup.get_exercise_keyboard()
    )


async def handle_exercise_input(update: Update, context: ContextTypes.DEFAULT_TYPE,
                              current_exercise: str, exercise_stage: str, message_text: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    exercise = PRACTICE_EXERCISES.get(current_exercise)

    if not exercise:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        context.user_data.clear()
        return

    if exercise_stage == 'waiting_for_description':
        context.user_data['situation_description'] = message_text

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        prompt = f"–ü–æ–º–æ–≥–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–∏—Ç—É–∞—Ü–∏–∏: {message_text}"

        try:
            response = await claude_service.get_consultation(user_id, prompt)
            await update.message.reply_text(
                response,
                reply_markup=NavigationMarkup.get_exercise_keyboard()
            )
            return
        except Exception as e:
            logger.error(f"Error in exercise AI response: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞?",
                reply_markup=NavigationMarkup.get_main_menu()
            )
            context.user_data.clear()
            return


async def send_knowledge_base_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    text = """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –º–µ—Ç–æ–¥—É "–æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è":

- –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–µ—Ç–æ–¥–∞ /principles
- –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è /examples
- –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã /faq
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è /practice

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª."""

    await update.message.reply_text(
        text,
        reply_markup=NavigationMarkup.get_knowledge_base_buttons()
    )


async def handle_exercise_completion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ context.user_data
    exercise_data = {
        'exercise_id': context.user_data.get('current_exercise'),
        'context': context.user_data.get('situation_description', '')
    }

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    await query.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏:\n"
        "- –ë—ã–ª–æ –ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã–º?\n"
        "- –ß—Ç–æ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω–Ω—ã–º?\n"
        "- –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
        reply_markup=NavigationMarkup.get_main_menu()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞
    context.user_data['awaiting_feedback'] = exercise_data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞
    context.user_data['awaiting_feedback'] = exercise_data

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "main_menu":
        await query.message.reply_text(
            f"{WELCOME_MESSAGE}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if query.data.startswith('exercise_'):
        exercise_number = query.data.split('_')[1]
        await handle_exercise(update, context, exercise_number)
        return

    if query.data == "complete_exercise":
        await handle_exercise_completion(update, context)
        return

    if query.data == "main_menu":
        await query.message.reply_text(
            f"{WELCOME_MESSAGE}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    section = KNOWLEDGE_BASE.get(query.data)
    if section:
        if query.data == 'practice':
            await query.message.reply_text(
                f"*{section['title']}*\n\n{section['content']}",
                parse_mode='Markdown',
                reply_markup=NavigationMarkup.get_exercise_buttons()
            )
        else:
            await query.message.reply_text(
                f"*{section['title']}*\n\n{section['content']}",
                parse_mode='Markdown',
                reply_markup=NavigationMarkup.get_knowledge_base_buttons(query.data)
            )
        return

async def knowledge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (/principles, /examples, –∏ —Ç.–¥.)"""
    command = update.message.text[1:]  # –£–±–∏—Ä–∞–µ–º '/' –∏–∑ –∫–æ–º–∞–Ω–¥—ã

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω–æ
    if command.startswith('exercise'):
        try:
            exercise_number = command.replace('exercise', '')
            await handle_exercise(update, context, exercise_number)
            return
        except ValueError:
            pass

    section = KNOWLEDGE_BASE.get(command)
    if not section:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    if command == 'practice':
        # –î–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        await update.message.reply_text(
            f"*{section['title']}*\n\n{section['content']}",
            parse_mode='Markdown',
            reply_markup=NavigationMarkup.get_exercise_buttons()
        )
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        await update.message.reply_text(
            f"*{section['title']}*\n\n{section['content']}",
            parse_mode='Markdown',
            reply_markup=NavigationMarkup.get_knowledge_base_buttons(command)
        )


async def principle_command(update: Update, context: ContextTypes.DEFAULT_TYPE, principle_number: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤"""
    principle_key = f'principle{principle_number}'
    principle = KNOWLEDGE_BASE.get(principle_key)

    if not principle:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ü–∏–ø–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    await update.message.reply_text(
        f"*{principle['title']}*\n\n{principle['content']}",
        parse_mode='Markdown',
        reply_markup=NavigationMarkup.get_knowledge_base_buttons('principles')
    )


async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/support')

    support_message = """üå± ‚Üí üåø ‚Üí üå≥ *–†–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞*

–†–∞–¥, —á—Ç–æ –≤—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç–µ—Å—å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ú–µ—Ç–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è!

*–ù–∞–¥ —á–µ–º –≤–µ–¥–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞:*
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ –ú–µ—Ç–æ–¥–µ –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏
‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –ú–µ—Ç–æ–¥–∞
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤ –ú–µ—Ç–æ–¥–∞
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –±–æ—Ç–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π

*–ö–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:*
–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ª—é–±–æ–π —Å—É–º–º—ã –ø–æ —Å–ª–µ–¥—é—É—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:
‚Ä¢ TON: `UQBgmqEz2BjkjfbaTq2HLYBwltRiI6F1xCVU521qpB3JEyu0`
‚Ä¢ USDT (TRC20): `TKWcNCibyZ3vGsTTXVaWgs5N9KmQkKmD5n`

*–ù–∞ —á—Ç–æ –∏–¥—É—Ç –∏ –≤ –±—É–¥—É—â–µ–º –±—É–¥—É—Ç –∏–¥—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞:*
‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –ú–µ—Ç–æ–¥–∞
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–Ω–∏–≥–∏
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ –æ–Ω–ª–∞–π–Ω-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –ª—É—á—à–µ! ‚≠êÔ∏è"""

    await update.message.reply_text(
        support_message,
        parse_mode='Markdown',
        reply_markup=NavigationMarkup.get_main_menu()
    )
