# handlers/message_handlers.py
import logging
import asyncio
from io import BytesIO, StringIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from services.claude_service import ClaudeService
from config.settings import WELCOME_MESSAGE, HELP_MESSAGE
from config.knowledge_content import KNOWLEDGE_BASE
from services.analytics_service import AnalyticsService
from database.models import UserAction, UserPseudonym, DialogueMetadata, DialogueContent
from datetime import datetime

from services.subscription_service import SubscriptionService
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class NavigationMarkup:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""

    @staticmethod
    def get_main_menu():
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç–∞—Ä–∏—Ñ–æ–≤"""
        keyboard = [
            [KeyboardButton("üÜï –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")],
            [KeyboardButton("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton("üíº –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    @staticmethod
    def get_knowledge_base_buttons(current_section=None):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        sections = {
            'principles': "–û –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö",
            'faq': "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
        }

        # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞
        if current_section and current_section in sections:
            sections.pop(current_section)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        items = list(sections.items())

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–∞—Ä–∞–º–∏
        for i in range(0, len(items), 2):
            row = []
            row.append(InlineKeyboardButton(items[i][1], callback_data=items[i][0]))
            if i + 1 < len(items):
                row.append(InlineKeyboardButton(items[i + 1][1], callback_data=items[i + 1][0]))
            buttons.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

        return InlineKeyboardMarkup(buttons)


async def log_user_action(context: ContextTypes.DEFAULT_TYPE, user_id: int, action_type: str, content: str = None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    analytics = AnalyticsService(context.bot_data['db_session'])
    analytics.log_action(user_id, action_type, content)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/start')

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    analytics = AnalyticsService(context.bot_data['db_session'])
    analytics.log_first_time_user(user_id)

    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=NavigationMarkup.get_main_menu()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/help')

    await update.message.reply_text(
        HELP_MESSAGE,
        reply_markup=NavigationMarkup.get_main_menu()
    )


async def new_consultation_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/new')

    # –°–æ–∑–¥–∞–µ–º ClaudeService —Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–µ–π
    claude_service = ClaudeService(context.bot_data['db_session'])
    claude_service.clear_conversation(user_id)

    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
        reply_markup=NavigationMarkup.get_main_menu()
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º ClaudeService —Å —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–µ–π
    claude_service = ClaudeService(context.bot_data['db_session'])

    if not update.effective_user:
        logger.error("No user found in update")
        return

    user_id = update.effective_user.id
    message_text = update.message.text if update.message else None

    if not message_text:
        logger.error(f"No message text found for user {user_id}")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await log_user_action(context, user_id, 'message_received', message_text[:100])

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    if message_text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π":
        await log_user_action(context, user_id, 'menu_action', 'knowledge_base')
        await send_knowledge_base_menu(update, context)
        return

    if message_text == "üÜï –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await log_user_action(context, user_id, 'menu_action', 'new_consultation')
        await new_consultation_command(update, context)
        return

    if message_text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await log_user_action(context, user_id, 'menu_action', 'feedback')
        await handle_feedback(update, context)
        return

    if message_text == "‚ùì –ü–æ–º–æ—â—å":
        await log_user_action(context, user_id, 'menu_action', 'help')
        await help_command(update, context)
        return

    if message_text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await log_user_action(context, user_id, 'menu_action', 'balance')
        from handlers.payment_menu_handlers import handle_balance_command
        await handle_balance_command(update, context)
        return

    if message_text == "üíº –¢–∞—Ä–∏—Ñ—ã":
        await log_user_action(context, user_id, 'menu_action', 'pricing')
        from handlers.payment_menu_handlers import handle_pricing_command
        await handle_pricing_command(update, context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription_service = SubscriptionService(context.bot_data['db_session'])
    subscription_status = subscription_service.get_user_subscription_status(user_id)

    credits_remaining = subscription_status.get('credits_remaining', 0)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
    if credits_remaining <= 0:
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_tariffs")],
            [InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")]
        ]

        await update.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫—Ä–µ–¥–∏—Ç—ã.\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å "
            "–∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –û–±—ã—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        await log_user_action(context, user_id, 'consultation_start', None)

        response = claude_service.get_consultation(user_id, message_text)

        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        subscription_service.use_credit(user_id, 1)

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        await log_user_action(context, user_id, 'consultation_complete', str(len(response)))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        new_status = subscription_service.get_user_subscription_status(user_id)

        new_credits = new_status.get('credits_remaining', 0)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫—Ä–µ–¥–∏—Ç–∞—Ö
        response_with_credits = (
            f"{response}\n\n"
            f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å –∫—Ä–µ–¥–∏—Ç–æ–≤: {new_credits}"
        )

        await update.message.reply_text(
            response_with_credits,
            reply_markup=NavigationMarkup.get_main_menu()
        )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await log_user_action(context, user_id, 'error', str(e)[:100])
        logger.error(f"Error in message handler: {e}")
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=NavigationMarkup.get_main_menu()
            )


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def handle_knowledge_section(update: Update, context: ContextTypes.DEFAULT_TYPE, section: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'knowledge_view', section)

    content = KNOWLEDGE_BASE.get(section)
    if not content:
        await log_user_action(context, user_id, 'error', f'section_not_found:{section}')
        return None
    return content


async def send_knowledge_base_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    text = """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –º–µ—Ç–æ–¥—É "–æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è":

- –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –º–µ—Ç–æ–¥–∞ /principles
- –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã /faq

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª."""

    await update.message.reply_text(
        text,
        reply_markup=NavigationMarkup.get_knowledge_base_buttons()
    )

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "main_menu":
        await query.message.reply_text(
            f"{WELCOME_MESSAGE}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    section = KNOWLEDGE_BASE.get(query.data)
    if section:
        await query.message.reply_text(
            f"*{section['title']}*\n\n{section['content']}",
            parse_mode='Markdown',
            reply_markup=NavigationMarkup.get_knowledge_base_buttons(query.data)
        )
        return

async def knowledge_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (/principles, /faq, /principle1, –∏ —Ç.–¥.)"""
    command = update.message.text[1:]  # –£–±–∏—Ä–∞–µ–º '/' –∏–∑ –∫–æ–º–∞–Ω–¥—ã

    section = KNOWLEDGE_BASE.get(command)
    if not section:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    await update.message.reply_text(
        f"*{section['title']}*\n\n{section['content']}",
        parse_mode='Markdown',
        reply_markup=NavigationMarkup.get_knowledge_base_buttons(command)
    )


async def principle_command(update: Update, context: ContextTypes.DEFAULT_TYPE, principle_number: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤"""
    principle_key = f'principle{principle_number}'
    principle = KNOWLEDGE_BASE.get(principle_key)

    if not principle:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–Ω—Ü–∏–ø–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=NavigationMarkup.get_main_menu()
        )
        return

    await update.message.reply_text(
        f"*{principle['title']}*\n\n{principle['content']}",
        parse_mode='Markdown',
        reply_markup=NavigationMarkup.get_knowledge_base_buttons('principles')
    )


async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"""
    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/feedback')

    await update.message.reply_text(
        "–ë—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞.",
        reply_markup=NavigationMarkup.get_main_menu()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    context.user_data['awaiting_feedback'] = True


async def privacy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /privacy"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from config.privacy_policy import PRIVACY_POLICY

    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/privacy')

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    policy_text = PRIVACY_POLICY
    max_length = 4000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

    if len(policy_text) <= max_length:
        await update.message.reply_text(
            policy_text,
            parse_mode='Markdown'
        )
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        parts = [policy_text[i:i + max_length] for i in range(0, len(policy_text), max_length)]
        for part in parts:
            await update.message.reply_text(
                part,
                parse_mode='Markdown'
            )

    logger.info(f"Privacy policy sent to user {user_id}")


async def privacy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /privacy"""
    logger.info("Privacy command handler called")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from config.privacy_policy import PRIVACY_POLICY

    user_id = update.effective_user.id
    logger.info(f"Processing privacy command for user {user_id}")

    await log_user_action(context, user_id, 'command', '/privacy')

    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä—è–º–æ –≤ —á–∞—Ç
        brief_msg = (
            "*–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*\n\n"
            "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π "
            "–∏ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\n"
            "–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –ú—ã —Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –í—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        )

        await update.message.reply_text(
            brief_msg + "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...",
            parse_mode='Markdown'
        )

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π
        from io import BytesIO

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown —Ä–∞–∑–º–µ—Ç–∫—É –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        plain_policy = PRIVACY_POLICY.replace('*', '').replace('_', '')

        # –°–æ–∑–¥–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        policy_file = BytesIO(plain_policy.encode('utf-8'))
        policy_file.name = "privacy_policy.txt"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        await update.message.reply_document(
            document=policy_file,
            caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ –ø–æ –º–µ—Ç–æ–¥—É '–æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è'"
        )

        logger.info(f"Privacy policy successfully sent to user {user_id}")
    except Exception as e:
        logger.error(f"Error sending privacy policy: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def handle_data_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mydata"""
    logger.info("Processing mydata command")

    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/mydata')

    await update.message.reply_text(
        "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        session = context.bot_data['db_session']

        # –ü–æ–ª—É—á–∞–µ–º pseudonym_id
        pseudonym = session.query(UserPseudonym).filter_by(user_id=user_id).first()
        pseudonym_id = pseudonym.pseudonym_id if pseudonym else str(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        dialogue_metadata = session.query(DialogueMetadata).filter_by(pseudonym_id=pseudonym_id) \
            .order_by(DialogueMetadata.timestamp.desc()) \
            .limit(30).all()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
        user_actions = session.query(UserAction).filter(
            UserAction.user_id == user_id
        ).order_by(UserAction.created_at).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        buffer = StringIO()
        buffer.write("# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–µ\n\n")
        buffer.write(f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        buffer.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogue_metadata)}\n\n")

        # –í–∫–ª—é—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
        buffer.write("## –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤\n\n")
        for dialogue in dialogue_metadata:
            if dialogue.content:
                buffer.write(f"**{dialogue.role}** ({dialogue.timestamp.strftime('%Y-%m-%d %H:%M:%S')})\n")
                try:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    buffer.write(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(dialogue.content.encrypted_content)} –±–∞–π—Ç\n\n")
                except Exception as decrypt_error:
                    buffer.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {decrypt_error}\n\n")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_actions:
            buffer.write("## –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π\n\n")
            for action in user_actions:
                buffer.write(f"**{action.action_type}** ({action.created_at.strftime('%Y-%m-%d %H:%M:%S')})\n")
                if action.content:
                    buffer.write(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {action.content[:500]}\n\n")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        file_content = buffer.getvalue()
        file_bytes = BytesIO(file_content.encode('utf-8'))
        file_bytes.name = f"user_data_{user_id}.md"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await update.message.reply_document(
            document=file_bytes,
            caption="–í–æ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
        )

        logger.info(f"Data export successfully sent to user {user_id}")
    except Exception as e:
        logger.error(f"Error exporting user data: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def handle_data_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deletedata"""
    logger.info("Processing deletedata command")

    user_id = update.effective_user.id
    await log_user_action(context, user_id, 'command', '/deletedata')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="confirm_delete_data")],
        [InlineKeyboardButton("üîí –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="anonymize_data")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete_data")]
    ]

    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n\n"
        "*–í–∞—Ä–∏–∞–Ω—Ç—ã*:\n"
        "1. *–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ* - –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
        "2. *–ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å* - –≤–∞—à Telegram ID –±—É–¥–µ—Ç –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –î–ª—è –≤–∞—Å —ç—Ç–æ —Ä–∞–≤–Ω–æ—Å–∏–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∏—é "
        "(–≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏), –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ–æ—Ä–º–µ "
        "–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )


async def handle_data_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    action = query.data

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from services.data_retention_service import DataRetentionService
        from services.encryption_service import EncryptionService

        session = context.bot_data['db_session']
        encryption_service = EncryptionService(session)
        retention_service = DataRetentionService(session, encryption_service)

        if action == "confirm_delete_data":
            logger.info(f"Confirming data deletion for user {user_id}")

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è correct –º–µ—Ç–æ–¥ manual_user_data_cleanup
            result = retention_service.manual_user_data_cleanup(
                user_id,
                reason="User request via /deletedata command"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω –ª–∏ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —á–∏—Å–ª–æ
            if isinstance(result, dict):
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Å–ª–æ–≤–∞—Ä—å, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –≤—ã–≤–æ–¥–∞
                deleted_actions = result.get('deleted_actions', 0)
                deleted_messages = result.get('deleted_messages', 0)
                deleted_feedbacks = result.get('deleted_feedbacks', 0)
                deleted_subscriptions = result.get('deleted_subscriptions', 0)

                total_deleted = deleted_actions + deleted_messages + deleted_feedbacks + deleted_subscriptions

                message = (
                    f"‚úÖ –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n"
                    f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_deleted}\n"
                    f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: {deleted_messages}\n"
                    f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è: {deleted_actions}\n"
                    f"‚Ä¢ –û—Ç–∑—ã–≤—ã: {deleted_feedbacks}\n\n"
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
                )
            else:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —á–∏—Å–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                message = (
                    f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n"
                    f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
                )

            await query.message.edit_text(message)
            logger.info(f"Successfully deleted data for user {user_id}")

        elif action == "anonymize_data":
            logger.info(f"Anonymizing data for user {user_id}")

            # –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = retention_service.anonymize_user(
                user_id,
                reason="User request via /deletedata command"
            )

            if success:
                await query.message.edit_text(
                    "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.\n\n"
                    "–í–∞—à Telegram ID –±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π. –î–ª—è –≤–∞—Å —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:\n\n"
                    "‚Ä¢ –í—ã —Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "‚Ä¢ –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ –æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n"
                    "‚Ä¢ –í–∞—à–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞\n\n"
                    "–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —Å–æ–±–ª—é–¥–µ–Ω–∞: –Ω–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–º–∏."
                )
                logger.info(f"Successfully anonymized user {user_id}")
            else:
                await query.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                logger.error(f"Failed to anonymize user {user_id}")

        elif action == "cancel_delete_data":
            logger.info(f"Data management cancelled by user {user_id}")
            await query.message.edit_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )

    except Exception as e:
        logger.error(f"Error in data management: {e}")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
