# handlers/payment_menu_handlers.py
import asyncio
import logging
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from config.settings import PRICING_PLANS
from services.subscription_service import SubscriptionService
from services.payment_service import PaymentService
from keyboards.payment_keyboard import PaymentKeyboards

logger = logging.getLogger(__name__)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤

async def get_user_credits_async(session, user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    service = SubscriptionService(session)
    # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ await
    result = service.get_user_subscription_status(user_id)
    return result


async def create_payment_async(session, user_id, plan_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    service = PaymentService(session)
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        lambda: service.create_payment(user_id, plan_id)
    )
    return result


async def check_payment_status_async(session, payment_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    service = PaymentService(session)
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        lambda: service.check_payment_status(payment_id)
    )
    return result


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async def handle_balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription_status = await get_user_credits_async(
        context.bot_data['db_session'],
        user_id
    )

    credits_remaining = subscription_status.get('credits_remaining', 0)
    has_active_subscription = subscription_status.get('has_active_subscription', False)
    plan_id = subscription_status.get('plan_id')
    has_used_trial = subscription_status.get('has_used_trial', False)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ
    message = [
        "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n",
        f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {credits_remaining}",
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ
    if has_active_subscription and plan_id:
        plan_name = PRICING_PLANS.get(plan_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        message.append(f"\n–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {plan_name}")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    keyboard.append([InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_tariffs")])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª)
    if not has_used_trial and credits_remaining == 0:
        keyboard.append([InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    keyboard.append([InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="credits_history")])

    await update.message.reply_text(
        "\n".join(message),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_pricing_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pricing –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö
    trial_plan = PRICING_PLANS.get('trial', {})
    test_plan = PRICING_PLANS.get('test', {})  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
    basic_plan = PRICING_PLANS.get('basic', {})
    standard_plan = PRICING_PLANS.get('standard', {})

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤
    message = [
        "üíº *–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã*\n",
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n",
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ü—Ä–æ–±–Ω—ã–π
    message.append(f"üéÅ *{trial_plan.get('name', '–ü—Ä–æ–±–Ω—ã–π')}*")
    message.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {trial_plan.get('messages', 20)}")
    message.append(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ")
    for feature in trial_plan.get('features', []):
        message.append(f"‚Ä¢ {feature}")
    message.append("")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ë–∞–∑–æ–≤—ã–π
    message.append(f"üí´ *{basic_plan.get('name', '–ë–∞–∑–æ–≤—ã–π')}*")
    message.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {basic_plan.get('messages', 100)}")
    message.append(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {basic_plan.get('price', 290)}‚ÇΩ")
    for feature in basic_plan.get('features', []):
        message.append(f"‚Ä¢ {feature}")
    message.append("")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç
    message.append(f"‚≠êÔ∏è *{standard_plan.get('name', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')}*")
    message.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {standard_plan.get('messages', 300)}")
    message.append(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {standard_plan.get('price', 690)}‚ÇΩ")
    for feature in standard_plan.get('features', []):
        message.append(f"‚Ä¢ {feature}")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–±–Ω—ã–π (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="select_plan:trial")],
        [InlineKeyboardButton(f"üí´ –ë–∞–∑–æ–≤—ã–π ({basic_plan.get('price', 290)}‚ÇΩ)", callback_data="select_plan:basic")],
        [InlineKeyboardButton(f"‚≠êÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç ({standard_plan.get('price', 690)}‚ÇΩ)", callback_data="select_plan:standard")]
    ]

    await update.message.reply_text(
        "\n".join(message),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        if data == "show_tariffs":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
            await handle_show_tariffs(query, context)

        elif data.startswith("select_plan:"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
            plan_id = data.split(":")[1]
            await handle_plan_selection(query, context, plan_id)

        elif data == "activate_trial":
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            await handle_trial_activation(query, context)

        elif data.startswith("create_payment:"):
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
            plan_id = data.split(":")[1]
            await handle_create_real_payment(query, context, plan_id)

        elif data.startswith("check_payment:"):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            payment_id = data.split(":")[1]
            await handle_check_real_payment(query, context, payment_id)

        elif data == "cancel_payment":
            # –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
            await query.message.edit_text(
                "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
                ])
            )

        elif data == "credits_history":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
            await handle_credits_history(query, context)

        elif data == "show_balance":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            await handle_show_balance(query, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ callback: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="show_tariffs")]
            ])
        )


# –í —Ñ—É–Ω–∫—Ü–∏–∏ handle_show_tariffs
async def handle_show_tariffs(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö
    trial_plan = PRICING_PLANS.get('trial', {})
    basic_plan = PRICING_PLANS.get('basic', {})
    standard_plan = PRICING_PLANS.get('standard', {})

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∞—Ä–∏—Ñ–æ–≤
    message = [
        "üíº *–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã*\n",
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n",
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤...
    message.append(f"üéÅ *{trial_plan.get('name', '–ü—Ä–æ–±–Ω—ã–π')}*")
    message.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {trial_plan.get('messages', 20)}")
    message.append(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n")

    message.append(f"üí´ *{basic_plan.get('name', '–ë–∞–∑–æ–≤—ã–π')}*")
    message.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {basic_plan.get('messages', 100)}")
    message.append(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {basic_plan.get('price', 290)}‚ÇΩ\n")

    message.append(f"‚≠êÔ∏è *{standard_plan.get('name', '–°—Ç–∞–Ω–¥–∞—Ä—Ç')}*")
    message.append(f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {standard_plan.get('messages', 300)}")
    message.append(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {standard_plan.get('price', 690)}‚ÇΩ")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–±–Ω—ã–π (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="select_plan:trial")],
        [InlineKeyboardButton(f"üí´ –ë–∞–∑–æ–≤—ã–π ({basic_plan.get('price', 290)}‚ÇΩ)", callback_data="select_plan:basic")],
        [InlineKeyboardButton(f"‚≠êÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç ({standard_plan.get('price', 690)}‚ÇΩ)",
                              callback_data="select_plan:standard")]
    ]

    await query.message.edit_text(
        "\n".join(message),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_show_balance(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ"""
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription_status = await get_user_credits_async(
        context.bot_data['db_session'],
        user_id
    )

    credits_remaining = subscription_status.get('credits_remaining', 0)
    has_active_subscription = subscription_status.get('has_active_subscription', False)
    plan_id = subscription_status.get('plan_id')
    has_used_trial = subscription_status.get('has_used_trial', False)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ
    message = [
        "üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n",
        f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {credits_remaining}",
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ
    if has_active_subscription and plan_id:
        plan_name = PRICING_PLANS.get(plan_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        message.append(f"\n–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {plan_name}")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    keyboard.append([InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_tariffs")])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª)
    if not has_used_trial and credits_remaining == 0:
        keyboard.append([InlineKeyboardButton("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    keyboard.append([InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="credits_history")])

    await query.message.edit_text(
        "\n".join(message),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_plan_selection(query, context, plan_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞"""
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
    plan = PRICING_PLANS.get(plan_id)

    if not plan:
        await query.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –ø—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    if plan_id == 'trial':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        subscription_status = await get_user_credits_async(
            context.bot_data['db_session'],
            user_id
        )

        has_used_trial = subscription_status.get('has_used_trial', False)

        if has_used_trial:
            # –ï—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
            keyboard = [
                [InlineKeyboardButton(f"üí´ –ë–∞–∑–æ–≤—ã–π ({PRICING_PLANS['basic']['price']}‚ÇΩ)",
                                      callback_data="select_plan:basic")],
                [InlineKeyboardButton(f"‚≠êÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç ({PRICING_PLANS['standard']['price']}‚ÇΩ)",
                                      callback_data="select_plan:standard")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
            ]

            await query.message.edit_text(
                "‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

        # –ï—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        keyboard = [
            [InlineKeyboardButton("‚ú® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="activate_trial")],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
        ]

        await query.message.edit_text(
            f"üéÅ *–ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ*\n\n"
            f"‚Ä¢ {plan['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"‚Ä¢ –ë–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è\n"
            f"‚Ä¢ –î–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º\n\n"
            f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    keyboard = [
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {plan['price']}‚ÇΩ", callback_data=f"create_payment:{plan_id}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
    ]

    features_text = "\n".join([f"‚Ä¢ {feature}" for feature in plan.get('features', [])])

    await query.message.edit_text(
        f"*{plan['name']} —Ç–∞—Ä–∏—Ñ*\n\n"
        f"‚Ä¢ {plan['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']}‚ÇΩ\n\n"
        f"{features_text}\n\n"
        f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_trial_activation(query, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    user_id = query.from_user.id

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    session = context.bot_data['db_session']
    subscription_service = SubscriptionService(session)

    result = subscription_service.activate_subscription(user_id, 'trial')

    if result:
        await query.message.edit_text(
            "‚úÖ *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def handle_create_real_payment(query, context, plan_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa"""
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    plan = PRICING_PLANS.get(plan_id)

    if not plan:
        await query.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    await query.message.edit_text(
        "‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
    payment_result = await create_payment_async(
        context.bot_data['db_session'],
        user_id,
        plan_id
    )

    if "error" in payment_result:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result['error']}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
            ])
        )
        return

    # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_id = payment_result.get("payment_id")
    payment_url = payment_result.get("payment_url")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", callback_data=f"check_payment:{payment_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ]

    await query.message.edit_text(
        f"‚úÖ *–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω*\n\n"
        f"–¢–∞—Ä–∏—Ñ: {plan['name']}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π: {plan['messages']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {plan['price']}‚ÇΩ\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ¬ª.\n"
        f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã¬ª.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_check_real_payment(query, context, payment_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = query.from_user.id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    await query.message.edit_text(
        "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    payment_status = await check_payment_status_async(
        context.bot_data['db_session'],
        payment_id
    )

    if "error" in payment_status:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {payment_status['error']}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment:{payment_id}")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
            ])
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    status = payment_status.get("status", "pending")
    paid = payment_status.get("paid", False)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    retry_keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"check_payment:{payment_id}")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
    ]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    if status == "succeeded" and paid:
        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
        plan_id = payment_status.get("description", "").split(" ")[2] if "description" in payment_status else "unknown"
        plan = PRICING_PLANS.get(plan_id, {})
        plan_name = plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')

        await query.message.edit_text(
            f"‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            f"–¢–∞—Ä–∏—Ñ: {plan_name}\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.\n\n"
            f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="show_balance")]
            ]),
            parse_mode=ParseMode.MARKDOWN
        )
    elif status == "canceled":
        # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
        await query.message.edit_text(
            "‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_tariffs")]
            ]),
            parse_mode=ParseMode.MARKDOWN
        )
    elif status == "pending":
        # –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await query.message.edit_text(
            "‚è≥ *–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n"
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, —Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑¬ª —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=InlineKeyboardMarkup(retry_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    elif status == "waiting_for_capture":
        # –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.message.edit_text(
            "‚è≥ *–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*\n\n"
            "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑¬ª —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=InlineKeyboardMarkup(retry_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        await query.message.edit_text(
            f"‚ÑπÔ∏è *–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}*\n\n"
            f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(retry_keyboard),
            parse_mode=ParseMode.MARKDOWN
        )


async def handle_credits_history(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏"""
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
    service = PaymentService(context.bot_data['db_session'])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º run_in_executor –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    loop = asyncio.get_running_loop()
    payment_history = await loop.run_in_executor(
        None,
        lambda: service.get_payment_history(user_id)
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è
    payments = payment_history.get('payments', [])

    if not payments:
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        await query.message.edit_text(
            "üìä *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="show_balance")]
            ]),
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    message = ["üìä *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π*\n"]

    for payment in payments:
        plan_id = payment.get('plan_id', 'unknown')
        plan = PRICING_PLANS.get(plan_id, {})
        plan_name = plan.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        status = payment.get('status', 'unknown')
        amount = payment.get('amount', 0)
        credits = plan.get('messages', 0)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = datetime.fromisoformat(payment.get('created_at', '').replace('Z', '+00:00')) \
            if payment.get('created_at') else None
        date_str = created_at.strftime('%d.%m.%Y %H:%M') if created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        status_emoji = "‚úÖ" if status == "succeeded" else "‚è≥" if status == "pending" else "‚ùå"
        status_text = "–£—Å–ø–µ—à–Ω–æ" if status == "succeeded" else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" if status == "pending" else "–û—Ç–º–µ–Ω–µ–Ω–æ"

        message.append(
            f"{status_emoji} *{date_str}*\n"
            f"–¢–∞—Ä–∏—Ñ: {plan_name} ({credits} —Å–æ–æ–±—â–µ–Ω–∏–π)\n"
            f"–°—É–º–º–∞: {amount}‚ÇΩ\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É", callback_data="show_balance")]
        ]

        await query.message.edit_text(
            "\n".join(message),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
