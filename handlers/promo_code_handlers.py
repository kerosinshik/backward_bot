# handlers/promo_code_handlers.py
import logging
import asyncio
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config.settings import ADMIN_USERS
from services.promo_code_service import PromoCodeService

logger = logging.getLogger(__name__)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ PromoCodeService

async def create_promo_code_async(
        session, code, credits, max_uses=None, created_by=None, expires_at=None
):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    service = PromoCodeService(session)
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        lambda: service.create_promo_code(code, credits, max_uses, created_by, expires_at)
    )
    return result


async def activate_promo_code_async(session, user_id, code):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    service = PromoCodeService(session)
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        lambda: service.activate_promo_code(user_id, code)
    )
    return result


async def disable_promo_code_async(session, code, admin_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    service = PromoCodeService(session)
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        lambda: service.disable_promo_code(code, admin_id)
    )
    return result


async def get_promo_code_stats_async(session, code=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
    service = PromoCodeService(session)
    loop = asyncio.get_running_loop()
    result = await loop.run_in_executor(
        None,
        lambda: service.get_promo_code_stats(code)
    )
    return result


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

async def handle_promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promo –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (–∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞)
    if not context.args or len(context.args) == 0:
        await update.message.reply_text(
            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/promo –ö–û–î_–ü–†–û–ú–û–ö–û–î–ê\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /promo LAUNCH100"
        )
        return

    promo_code = context.args[0].upper()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    success, message, credits = await activate_promo_code_async(
        context.bot_data['db_session'],
        user_id,
        promo_code
    )

    if success:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await update.message.reply_text(
            f"‚úÖ {message}\n\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞."
        )
    else:
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(f"‚ùå {message}")


async def handle_create_promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /createpromo –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/createpromo –ö–û–î –ö–†–ï–î–ò–¢–´ [–ú–ê–ö–°_–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ô] [–î–ù–ï–ô_–ê–ö–¢–ò–í–ù–û–°–¢–ò]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/createpromo LAUNCH100 100\n"
            "/createpromo TEST50 50 10\n"
            "/createpromo TEMP20 20 5 30"
        )
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    code = context.args[0].upper()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    try:
        credits = int(context.args[1])
        if credits <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü–∞—Ä—Å–∏–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    max_uses = None
    expires_at = None

    if len(context.args) >= 3:
        try:
            max_uses = int(context.args[2])
            if max_uses <= 0:
                max_uses = None
        except ValueError:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

    if len(context.args) >= 4:
        try:
            days_valid = int(context.args[3])
            if days_valid > 0:
                expires_at = datetime.utcnow() + timedelta(days=days_valid)
        except ValueError:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    success, message = await create_promo_code_async(
        context.bot_data['db_session'],
        code,
        credits,
        max_uses,
        user_id,
        expires_at
    )

    if success:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        expiry_info = f", –¥–µ–π—Å—Ç–≤—É–µ—Ç {context.args[3]} –¥–Ω–µ–π" if len(context.args) >= 4 else ""
        max_uses_info = f", –º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}" if max_uses else ""

        await update.message.reply_text(
            f"‚úÖ {message}\n\n"
            f"üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n"
            f"‚Ä¢ –ö–æ–¥: {code}\n"
            f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {credits}{max_uses_info}{expiry_info}"
        )
    else:
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(f"‚ùå {message}")


async def handle_disable_promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /disablepromo –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (–∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞)
    if not context.args or len(context.args) == 0:
        await update.message.reply_text(
            "–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/disablepromo –ö–û–î_–ü–†–û–ú–û–ö–û–î–ê\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /disablepromo LAUNCH100"
        )
        return

    promo_code = context.args[0].upper()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    success, message = await disable_promo_code_async(
        context.bot_data['db_session'],
        promo_code,
        user_id
    )

    if success:
        await update.message.reply_text(f"‚úÖ {message}")
    else:
        await update.message.reply_text(f"‚ùå {message}")


async def handle_promostat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promostat –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_USERS:
        await update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞)
    code = None
    if context.args and len(context.args) > 0:
        code = context.args[0].upper()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_promo_code_stats_async(
        context.bot_data['db_session'],
        code
    )

    if code and not stats['promo_codes']:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if code:
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É
        promo = stats['promo_codes'][0]

        message = [
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo['code']}*\n",
            f"‚Ä¢ –ö—Ä–µ–¥–∏—Ç—ã: {promo['credits']}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if promo['is_active'] else '‚ùå'}",
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo['used_count']}/{promo['max_uses'] if promo['max_uses'] else '‚àû'}",
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {promo['unique_users']}",
            f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {promo['total_credits_granted']}",
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {promo['created_at'].split('T')[0]}",
        ]

        if promo['expires_at']:
            message.append(f"‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: {promo['expires_at'].split('T')[0]}")

        await update.message.reply_text("\n".join(message), parse_mode='Markdown')
    else:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
        message = [
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤*\n",
            f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['total_codes']}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {stats['active_codes']}",
            f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats['total_usages']}",
            f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_credits_granted']}\n",
            f"*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:*"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö
        for promo in stats['promo_codes'][-5:]:
            status = "‚úÖ" if promo['is_active'] else "‚ùå"
            message.append(
                f"‚Ä¢ {promo['code']}: {promo['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤, "
                f"{promo['used_count']}/{promo['max_uses'] if promo['max_uses'] else '‚àû'} "
                f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π {status}"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        message.append("\n–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /promostat –ö–û–î")

        await update.message.reply_text("\n".join(message), parse_mode='Markdown')
