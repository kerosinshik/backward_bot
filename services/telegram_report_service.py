# services/telegram_report_service.py
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional

from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError

from services.analytics_service import AnalyticsService
from services.user_history_service import UserHistoryService
from config.settings import (
    STATS_CHANNELS,
    ANONYMIZATION_SETTINGS,
    REPORT_SETTINGS
)

logger = logging.getLogger(__name__)


class TelegramReportService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    """

    def __init__(
            self,
            bot: Bot,
            analytics_service: AnalyticsService,
            user_history_service: Optional[UserHistoryService] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
            analytics_service: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            user_history_service: –°–µ—Ä–≤–∏—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        self.bot = bot
        self.analytics = analytics_service
        self.user_history = user_history_service

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        self.pseudonymize = ANONYMIZATION_SETTINGS.get(
            'enable_pseudonymization',
            True
        )

    async def send_daily_report(
            self,
            channel_id: Optional[str] = None,
            stats: Optional[Dict[str, Any]] = None
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            stats: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞
            if not stats:
                stats = self.analytics.get_daily_stats()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self._format_daily_report(stats)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            channels = [channel_id] if channel_id else STATS_CHANNELS

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for channel in channels:
                try:
                    await self._safe_send_message(channel, report)
                except Exception as e:
                    logger.error(f"Error sending daily report to channel {channel}: {e}")

        except Exception as e:
            logger.error(f"Error preparing daily report: {e}")

    async def send_weekly_report(
            self,
            stats: Optional[Dict[str, Any]] = None,
            channel_id: Optional[str] = None
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Args:
            stats: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
            if not stats:
                end_date = datetime.utcnow()
                start_date = end_date - timedelta(days=7)
                stats = self._aggregate_weekly_stats(start_date, end_date)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self._format_weekly_report(stats)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            channels = [channel_id] if channel_id else STATS_CHANNELS

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
            for channel in channels:
                try:
                    await self._safe_send_message(channel, report)
                except Exception as e:
                    logger.error(f"Error sending weekly report to channel {channel}: {e}")

        except Exception as e:
            logger.error(f"Error preparing weekly report: {e}")

    def _format_daily_report(self, stats: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        try:
            # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞
            report = [
                f"üìä *–ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ ({stats.get('date', '–°–µ–≥–æ–¥–Ω—è')})*\n",

                "üë• *–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò*",
                f"‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {stats['users'].get('total_unique', 0)}",
                f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats['users'].get('new_users', 0)}",
                f"‚Ä¢ –í–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è: {stats['users'].get('returning_users', 0)}",
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['users'].get('active_users', 0)}\n",

                "üìà *–ê–ö–¢–ò–í–ù–û–°–¢–¨*",
                f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['engagement'].get('total_actions', 0)}",
                self._format_command_usage(stats['engagement'].get('command_usage', {})),
                self._format_peak_hours(stats['engagement'].get('peak_hours', {}))
            ]

            # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if stats.get('consultations'):
                report.extend([
                    "\nüó£Ô∏è *–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò*",
                    f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats['consultations'].get('total_consultations', 0)}",
                    f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {stats['consultations'].get('consultation_length', {}).get('avg_length', 0):.1f} —Å–∏–º–≤–æ–ª–æ–≤"
                ])

            # –û—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if stats.get('errors', {}).get('total_errors', 0) > 0:
                report.extend([
                    "\n‚ö†Ô∏è *–û–®–ò–ë–ö–ò*",
                    f"‚Ä¢ –í—Å–µ–≥–æ: {stats['errors'].get('total_errors', 0)}",
                    f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {stats['errors'].get('error_rate', 0):.2f}%"
                ])

            return "\n".join(report)

        except Exception as e:
            logger.error(f"Error formatting daily report: {e}")
            return "üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"

    def _format_weekly_report(self, stats: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏

        Args:
            stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        try:
            # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            report = [
                f"üìä *–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢* ({stats.get('period', '–ó–∞ –Ω–µ–¥–µ–ª—é')})\n",

                "üë• *–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò*",
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}",
                f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats.get('new_users', 0)}",
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}\n",

                "üìà *–ê–ö–¢–ò–í–ù–û–°–¢–¨*",
                f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats.get('total_actions', 0)}",
                f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {stats.get('avg_daily_actions', 0):.1f}\n"
            ]

            # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            if stats.get('consultations'):
                report.extend([
                    "üó£Ô∏è *–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò*",
                    f"‚Ä¢ –í—Å–µ–≥–æ: {stats['consultations'].get('total', 0)}",
                    f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['consultations'].get('completed', 0)}",
                    f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {stats['consultations'].get('avg_length', 0):.1f} —Å–æ–æ–±—â–µ–Ω–∏–π"
                ])

            # –û—à–∏–±–∫–∏
            if stats.get('errors'):
                report.extend([
                    "\n‚ö†Ô∏è *–û–®–ò–ë–ö–ò*",
                    f"‚Ä¢ –í—Å–µ–≥–æ: {stats['errors'].get('total_errors', 0)}",
                    f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {stats['errors'].get('error_rate', 0):.2f}%"
                ])

            return "\n".join(report)

        except Exception as e:
            logger.error(f"Error formatting weekly report: {e}")
            return "üìä –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"

    def _aggregate_weekly_stats(
            self,
            start_date: datetime,
            end_date: datetime
    ) -> Dict[str, Any]:
        """
        –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é

        Args:
            start_date: –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
            end_date: –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏

        Returns:
            –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º –∏ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
        weekly_stats = {
            'period': f"{start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}",
            'total_users': 0,
            'new_users': 0,
            'active_users': 0,
            'total_actions': 0,
            'avg_daily_actions': 0,
            'consultations': {
                'total': 0,
                'completed': 0,
                'avg_length': 0
            },
            'errors': {
                'total_errors': 0,
                'error_rate': 0
            }
        }

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        days_count = 0
        current_date = start_date
        while current_date <= end_date:
            try:
                daily_stats = self.analytics.get_daily_stats(current_date)

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                weekly_stats['total_users'] += daily_stats['users'].get('total_unique', 0)
                weekly_stats['new_users'] += daily_stats['users'].get('new_users', 0)
                weekly_stats['active_users'] += daily_stats['users'].get('active_users', 0)

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                weekly_stats['total_actions'] += daily_stats['engagement'].get('total_actions', 0)

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                weekly_stats['consultations']['total'] += daily_stats.get('consultations', {}).get('total_consultations', 0)

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                weekly_stats['errors']['total_errors'] += daily_stats.get('errors', {}).get('total_errors', 0)

                days_count += 1
                current_date += timedelta(days=1)

            except Exception as e:
                logger.error(f"Error processing daily stats for {current_date}: {e}")
                continue

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if days_count > 0:
            weekly_stats['avg_daily_actions'] = weekly_stats['total_actions'] / days_count
            weekly_stats['errors']['error_rate'] = (
                                                           weekly_stats['errors']['total_errors'] / (
                                                               weekly_stats['total_actions'] or 1)
                                                   ) * 100

        return weekly_stats

    def _format_command_usage(self, command_usage: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥

        Args:
            command_usage: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not command_usage:
            return "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"

        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            sorted_commands = sorted(
                command_usage.items(),
                key=lambda x: x[1].get('total_usage', 0),
                reverse=True
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–ø-5 –∫–æ–º–∞–Ω–¥
            command_lines = [
                f"‚Ä¢ {cmd}: {stats.get('total_usage', 0)} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('unique_users', 0)})"
                for cmd, stats in sorted_commands[:5]
            ]

            return "‚Ä¢ –¢–æ–ø –∫–æ–º–∞–Ω–¥:\n" + "\n".join(command_lines)

        except Exception as e:
            logger.error(f"Error formatting command usage: {e}")
            return "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"

    def _format_peak_hours(self, peak_hours: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤

        Args:
            peak_hours: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not peak_hours:
            return "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

        try:
            # –ù–∞—Ö–æ–¥–∏–º —á–∞—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            max_hour_stats = max(
                peak_hours.items(),
                key=lambda x: x[1].get('total_actions', 0)
            )

            return (
                f"‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {max_hour_stats[0]}:00-{int(max_hour_stats[0]) + 1}:00 "
                f"(–¥–µ–π—Å—Ç–≤–∏–π: {max_hour_stats[1].get('total_actions', 0)})"
            )

        except Exception as e:
            logger.error(f"Error formatting peak hours: {e}")
            return "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

    async def _safe_send_message(self, channel_id: str, message: str):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            await self.bot.send_message(
                chat_id=channel_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
            logger.info(f"Report sent successfully to channel {channel_id}")

        except TelegramError as e:
            logger.error(f"Telegram error sending report to {channel_id}: {e}")
        except Exception as e:
            logger.error(f"Unexpected error sending report to {channel_id}: {e}")
