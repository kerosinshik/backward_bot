# services/telegram_report_service.py

import logging
from datetime import datetime
from typing import Dict, Any
from telegram import Bot
from services.analytics_service import AnalyticsService
from config.settings import STATS_CHANNELS

logger = logging.getLogger(__name__)


class TelegramReportService:
    def __init__(self, bot: Bot, analytics_service: AnalyticsService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—á–µ—Ç–æ–≤

        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
            analytics_service: –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        """
        self.bot = bot
        self.analytics = analytics_service

    async def send_daily_report(self, channel_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            stats = self.analytics.get_daily_stats()
            report = self._format_daily_report(stats)
            channels = [channel_id] if channel_id else STATS_CHANNELS

            for channel in channels:
                try:
                    await self.bot.send_message(
                        chat_id=channel,
                        text=report,
                        parse_mode='Markdown'
                    )
                    logger.info(f"Daily report sent to channel {channel}")
                except Exception as e:
                    logger.error(f"Error sending daily report to channel {channel}: {e}")
        except Exception as e:
            logger.error(f"Error preparing daily report: {e}")

    async def send_weekly_report(self, stats: Dict[str, Any], channel_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = self._format_weekly_report(stats)
            channels = [channel_id] if channel_id else STATS_CHANNELS

            for channel in channels:
                try:
                    await self.bot.send_message(
                        chat_id=channel,
                        text=report,
                        parse_mode='Markdown'
                    )
                    logger.info(f"Weekly report sent to channel {channel}")
                except Exception as e:
                    logger.error(f"Error sending weekly report to channel {channel}: {e}")
        except Exception as e:
            logger.error(f"Error preparing weekly report: {e}")

    def _format_daily_report(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = [
            f"üìä *–ê–ù–ê–õ–ò–ó –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ú–ï–¢–û–î–ê ({stats['date']})*\n",

            "üë• *–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò*",
            f"‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {stats['users']['total_unique']}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö: {stats['users']['new_users']}",
            f"‚Ä¢ –í–µ—Ä–Ω—É–≤—à–∏—Ö—Å—è: {stats['users']['returning_users']}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['users']['active_users']}\n",

            "üìà *–ê–ö–¢–ò–í–ù–û–°–¢–¨*",
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['engagement']['total_actions']}",
            self._format_command_usage(stats['engagement'].get('command_usage', {})),
            self._format_peak_hours(stats['engagement'].get('peak_hours', {})),

            "üìö *–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô*",
            self._format_knowledge_views(stats['content'].get('knowledge_base_views', {})),

            "üéØ *–£–ü–†–ê–ñ–ù–ï–ù–ò–Ø*",
            f"‚Ä¢ –ù–∞—á–∞—Ç–æ: {stats['exercises']['total_started']}",
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['exercises']['total_completed']}",
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stats['exercises'].get('completion_rate', 0):.1f}%"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –æ—à–∏–±–∫–∞–º–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if stats['errors']['total_errors'] > 0:
            report.extend([
                "\n‚ö†Ô∏è *–û–®–ò–ë–ö–ò*",
                f"‚Ä¢ –í—Å–µ–≥–æ: {stats['errors']['total_errors']}",
                f"‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {stats['errors'].get('error_rate', 0):.2f}%"
            ])

        return "\n".join(report)

    def _format_weekly_report(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = [
            f"üìä *–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ({stats.get('period', '–ó–∞ –Ω–µ–¥–µ–ª—é')})*\n",

            "üë• *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*",
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users'].get('total_unique', 0)}",
            f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users'].get('new_users', 0)}",
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users'].get('active_users', 0)}\n",

            "üìà *–ê–ö–¢–ò–í–ù–û–°–¢–¨*",
            f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['engagement'].get('total_actions', 0)}",
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {stats['engagement'].get('avg_daily_actions', 0):.1f}",

            "üìä *–†–ï–ó–£–õ–¨–¢–ê–¢–´*",
            f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats['content'].get('completed_consultations', 0)}",
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {stats['exercises'].get('total_completed', 0)}",
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stats['exercises'].get('completion_rate', 0):.1f}%"
        ]

        return "\n".join(report)

    def _format_command_usage(self, command_usage: Dict[str, int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        if not command_usage:
            return "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"

        commands = sorted(command_usage.items(), key=lambda x: x[1], reverse=True)[:5]
        return "‚Ä¢ –¢–æ–ø –∫–æ–º–∞–Ω–¥:\n  " + "\n  ".join(
            f"{cmd}: {count}" for cmd, count in commands
        )

    def _format_peak_hours(self, peak_hours: Dict[int, int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not peak_hours:
            return "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"

        # –ù–∞—Ö–æ–¥–∏–º —á–∞—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        max_hour = max(peak_hours.items(), key=lambda x: x[1])[0]
        return f"‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {max_hour}:00-{(max_hour + 1):02d}:00"

    def _format_knowledge_views(self, views: Dict[str, int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        if not views:
            return "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º"

        sections = sorted(views.items(), key=lambda x: x[1], reverse=True)
        return "‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n  " + "\n  ".join(
            f"{section}: {count}" for section, count in sections[:3]
        )
